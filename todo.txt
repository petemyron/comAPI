TODO


ComAPI app
========================
x add user model with Devise
  + add favorites (groups and calls)

x add grouping of APIs
  x don't forget that if groups are deleted, that those calls should do *something*, notify or delete
  x show tabs of groups
  + create a user field for last viewed group and show it first, if it is set, otherwise show the All tab
    x update the field every time the user selects a different group to show
    - will have to clean the user table if a group is deleted (actually, it'll just show no methods if the user is taken there, and they'll likely click something else, setting a new recently_viewed_group)
  x search within a group, not all calls  
  x need to fix the tab styling still
  x add an "all" tab, which should also include orphaned calls (with a delete)
  
x add logging of calls
  x :request, :response, :timestamps, :user_id
  x add more fields: :method_type, :endpoint_uri
  x adjust timestamps for local machine time zone
  x add search of the call logs
  x add pagination
  x default to see only *my* requests, if logged in
    x otherwise, link_to registration page

- add CodeRay for XML formatting

x add jQuery

- add highlighting of common_params used in a hovered API call
  + show the update form for all the common params used in the execution of the call, on the make_request page

- add email server for recovering logins

- add testing with rspec

- add ability to reset all xml requests

x add GET|POST ability
  x add other REST states, PUT, HEAD, DELETE

- Manage SSL certs

- Customize headers



FYI
----
- images with highlights have #ffa200 (orange color) with #858585 (gray) border and 50% opacity
- helpful in rails console:
  - log a user in (using the sign_in Devise helper)
    user = User.new(:email => "test@test.com", :password => "abcdef", :password_confirmation => "abcdef")
    user.save
    app.post('users/sign_in', {"user" => {"email" => "test@test.com", "password" => "abcdef"}})
    
  - call a method (like make_request)
    app.get '/calls/1/make_request'













